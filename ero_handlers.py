##############
###–≠–†–û-–±–æ—Ç—ã###
##############

from aiogram.enums import ParseMode
import logging, math
from aiogram import F, Router
from aiogram.types import (
    CallbackQuery, InlineKeyboardButton,
    InlineKeyboardMarkup, ChatPermissions
)
from show_handlers import is_user_admin
from config.config_bot import bot, GROUP_ID
from database import (

    get_user_data, delete_user, update_user_list,
    get_suspicious_users, get_violator_users, add_banned_user

)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
USERS_PER_PAGE = 10

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏—è"
@router.callback_query(lambda c: c.data == 'suspicions_menu')
async def show_suspicions_menu(callback_query: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ", callback_data="show_suspicious_users")],
        [InlineKeyboardButton(text="üö´ –ù–∞—Ä—É—à–∏—Ç–µ–ª–∏", callback_data="show_violator_users")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
    ])
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@router.callback_query(lambda c: c.data.startswith('show_suspicious_users'))
async def show_suspicious_users(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    try:
        parts = callback_query.data.split('_')
        if len(parts) > 3:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: show_suspicious_users_page_X
            page_number = int(parts[-1])
        else:
            page_number = 1
    except:
        page_number = 1

    suspicious_users = await get_suspicious_users()

    if suspicious_users:
        total_users = len(suspicious_users)
        total_pages = math.ceil(total_users / USERS_PER_PAGE)
        page_number = max(1, min(page_number, total_pages))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        start_index = (page_number - 1) * USERS_PER_PAGE
        end_index = start_index + USERS_PER_PAGE
        current_page_users = suspicious_users[start_index:end_index]

        keyboard_buttons = []
        for user in current_page_users:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
            try:
                user_chat = await bot.get_chat(user['user_id'])
                user_full_name = user_chat.full_name
                username = user_chat.username
                if username:
                    user_text = f"@{username}"
                else:
                    user_text = user_full_name
            except:
                user_text = f"ID: {user['user_id']}"

            button = InlineKeyboardButton(
                text=user_text,
                callback_data=f"select_suspicious_user_{user['user_id']}"
            )
            keyboard_buttons.append([button])  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navigation_buttons = []
        if page_number > 1:
            navigation_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"show_suspicious_users_page_{page_number - 1}"
                )
            )
        if page_number < total_pages:
            navigation_buttons.append(
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"show_suspicious_users_page_{page_number + 1}"
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if navigation_buttons:
            keyboard_buttons.append(navigation_buttons)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = [
            InlineKeyboardButton(
                text="üîí –ó–∞–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö",
                callback_data="ban_all_suspicious_users"
            ),
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data="update_user_list"
            ),
            InlineKeyboardButton(
                text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                callback_data="close_message"
            )
        ]
        keyboard_buttons.append(action_buttons)

        kb = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        try:
            await callback_query.message.answer(
                "–°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
                reply_markup=kb
            )
        except:
            pass
    else:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]]
        )
        try:
            await callback_query.message.answer(
                "–ù–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                reply_markup=kb
            )
        except:
            pass

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å"
@router.callback_query(lambda c: c.data == "update_user_list")
async def update_user_list_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    await update_user_list()
    await callback_query.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω.", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π
    await show_violator_users(callback_query)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@router.callback_query(lambda c: c.data.startswith('select_suspicious_user_'))
async def select_suspicious_user(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    try:
        selected_user_id = int(callback_query.data.split('_')[-1])
    except ValueError:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    user_data = await get_user_data(selected_user_id)
    if user_data:
        try:
            user_chat = await bot.get_chat(selected_user_id)
            username = user_chat.username
            if username:
                mention = f'@{username}'
                user_profile_link = f'<a href="https://t.me/{username}">{mention}</a>'
            else:
                user_full_name = user_chat.full_name
                link = f'tg://user?id={selected_user_id}'
                user_profile_link = f'<a href="{link}">{user_full_name}</a>'
        except:
            user_profile_link = f"ID: {selected_user_id}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ó–∞–±–∞–Ω–∏—Ç—å",
                    callback_data=f"ban_suspicious_user_{selected_user_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üö´ –£–¥–∞–ª–∏—Ç—å –∏–∑ –ø—É–ª–∞",
                    callback_data=f"remove_suspicious_user_{selected_user_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="close_message"
                )
            ]
        ])

        try:
            await callback_query.message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_profile_link}:",
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
        except:
            pass
        await callback_query.answer()
    else:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        try:
            await callback_query.message.delete()
        except:
            pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@router.callback_query(lambda c: c.data.startswith('show_violator_users'))
async def show_violator_users(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    try:
        _, _, page = callback_query.data.partition('_')
        page_number = int(page) if page.isdigit() else 1
    except:
        page_number = 1

    violator_users = await get_violator_users()

    if violator_users:
        total_users = len(violator_users)
        total_pages = math.ceil(total_users / USERS_PER_PAGE)
        page_number = max(1, min(page_number, total_pages))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        start_index = (page_number - 1) * USERS_PER_PAGE
        end_index = start_index + USERS_PER_PAGE
        current_page_users = violator_users[start_index:end_index]

        keyboard_buttons = []
        for user in current_page_users:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
            try:
                user_chat = await bot.get_chat(user['user_id'])
                user_full_name = user_chat.full_name
            except:
                user_full_name = f"ID: {user['user_id']}"
            user_text = user_full_name
            button = InlineKeyboardButton(text=user_text, callback_data=f"select_violator_user_{user['user_id']}")
            keyboard_buttons.append([button])  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navigation_buttons = []
        if page_number > 1:
            navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"show_violator_users_{page_number - 1}"))
        if page_number < total_pages:
            navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"show_violator_users_{page_number + 1}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if navigation_buttons:
            keyboard_buttons.append(navigation_buttons)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = [
            InlineKeyboardButton(text="üîí –ó–∞–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö", callback_data="ban_all_violator_users"),
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data="update_user_list"
            ),
            InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")
        ]
        keyboard_buttons.append(action_buttons)

        kb = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        try:
            await callback_query.message.answer("–°–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π:", reply_markup=kb)
        except:
            pass
    else:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]]
        )
        try:
            await callback_query.message.answer("–ù–µ—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π.", reply_markup=kb)
        except:
            pass

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è
@router.callback_query(lambda c: c.data.startswith('select_violator_user_'))
async def select_violator_user(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    try:
        selected_user_id = int(callback_query.data.split('_')[-1])
    except ValueError:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    user_data = await get_user_data(selected_user_id)
    if user_data:
        try:
            user_chat = await bot.get_chat(selected_user_id)
            username = user_chat.username
            if username:
                mention = f'@{username}'
                user_profile_link = f'<a href="https://t.me/{username}">{mention}</a>'
            else:
                user_full_name = user_chat.full_name
                link = f'tg://user?id={selected_user_id}'
                user_profile_link = f'<a href="{link}">{user_full_name}</a>'
        except:
            user_profile_link = f"ID: {selected_user_id}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban_violator_user_{selected_user_id}")],
            [InlineKeyboardButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –∏–∑ –ø—É–ª–∞", callback_data=f"remove_violator_user_{selected_user_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_message")]
        ])

        try:
            await callback_query.message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_profile_link}:",
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
        except:
            pass
        await callback_query.answer()
    else:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        try:
            await callback_query.message.delete()
        except:
            pass



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda c: c.data.startswith('ban_suspicious_user_'))
async def ban_suspicious_user(callback_query: CallbackQuery):
    admin_user_id = callback_query.from_user.id
    if not await is_user_admin(admin_user_id):
        return
    message_id = callback_query.message.message_id
    selected_user_id = int(callback_query.data.split('_')[-1])
    user_data = await get_user_data(selected_user_id)

    if user_data:
        chat_id = user_data['chat_id']
        try:
            await callback_query.bot.ban_chat_member(chat_id=chat_id, user_id=selected_user_id)
            await add_banned_user(selected_user_id)
            await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} –∑–∞–±–∞–Ω–µ–Ω.", show_alert=True)
            await callback_query.message.delete()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_user_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user_id}: {e}")
            await callback_query.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user_id}.", show_alert=True)
    else:
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await callback_query.message.delete(message_id=message_id)
        await callback_query.message.delete(message_id=message_id-2)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—É–ª–∞
@router.callback_query(lambda c: c.data.startswith('remove_suspicious_user_'))
async def remove_suspicious_user(callback_query: CallbackQuery):
    chat_id = GROUP_ID
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    selected_user_id = int(callback_query.data.split('_')[-1])
    try:
        member = await bot.get_chat_member(chat_id, selected_user_id)
        status = member.status
    
        await bot.restrict_chat_member(
                    chat_id=chat_id,
                    user_id=selected_user_id,
                    permissions=ChatPermissions(
                        can_send_messages=True
                    )
                )
        
        await delete_user(selected_user_id)
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ø—É–ª–∞.", show_alert=True)
        # await send_nickname_change_request(selected_user_id)
        await callback_query.message.delete()
    except Exception as e:
        await delete_user(selected_user_id)
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ø—É–ª–∞.", show_alert=True)
        # await send_nickname_change_request(selected_user_id)
        await callback_query.message.delete()

# async def send_nickname_change_request(user_id):
#     try:
#         message_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à –Ω–∏–∫–Ω–µ–π–º —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —ç–º–æ–¥–∑–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ."
#         await bot.send_message(chat_id=user_id, text=message_text)
#         logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —Å –ø—Ä–æ—Å—å–±–æ–π —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º.")
#     except Exception as e:
#         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞ –≤—Å–µ—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data == 'ban_all_suspicious_users')
async def ban_all_suspicious_users(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    suspicious_users = await get_suspicious_users()

    if not suspicious_users:
        await callback_query.answer("–ù–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–∞–Ω–∞.", show_alert=True)
        await callback_query.message.delete()
        return

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö", callback_data="ban_all_suspicious_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_ban_all_suspicious")]
    ])

    await callback_query.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(suspicious_users)} —á–µ–ª.)?",
        reply_markup=confirm_kb
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –±–∞–Ω–∞ –≤—Å–µ—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data == 'cancel_ban_all_suspicious')
async def cancel_ban_all_suspicious(callback_query: CallbackQuery):
    await callback_query.answer("–ë–∞–Ω –æ—Ç–º–µ–Ω—ë–Ω.")
    await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∞–Ω–∞ –≤—Å–µ—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data == 'ban_all_suspicious_confirm')
async def ban_all_suspicious_confirm(callback_query: CallbackQuery):
    admin_user_id = callback_query.from_user.id
    if not await is_user_admin(admin_user_id):
        return

    suspicious_users = await get_suspicious_users()

    if not suspicious_users:
        await callback_query.answer("–ù–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–∞–Ω–∞.", show_alert=True)
        await callback_query.message.delete()
        return

    success_count = 0
    for user in suspicious_users:
        user_id = user['user_id']
        chat_id = user['chat_id']
        try:
            # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await callback_query.bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—É–ª–∞
            await add_banned_user(user_id)
            success_count += 1
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_user_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    await callback_query.answer(f"–ó–∞–±–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {success_count}.", show_alert=True)
    await callback_query.message.delete()




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è
@router.callback_query(lambda c: c.data.startswith('ban_violator_user_'))
async def ban_violator_user(callback_query: CallbackQuery):
    
    admin_user_id = callback_query.from_user.id
    if not await is_user_admin(admin_user_id):
        return

    selected_user_id = int(callback_query.data.split('_')[-1])
    user_data = await get_user_data(selected_user_id)

    if user_data:
        chat_id = user_data['chat_id']
        try:
            await callback_query.bot.ban_chat_member(chat_id=chat_id, user_id=selected_user_id)
            await add_banned_user(selected_user_id)
            await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} –∑–∞–±–∞–Ω–µ–Ω.", show_alert=True)
            await callback_query.message.delete()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_user_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user_id}: {e}")
            await callback_query.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user_id}.", show_alert=True)
    else:
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è –∏–∑ –ø—É–ª–∞
@router.callback_query(lambda c: c.data.startswith('remove_violator_user_'))
async def remove_violator_user(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    if not await is_user_admin(user_id):
        return
    
    selected_user_id = int(callback_query.data.split('_')[-1])
    try:
        member = await bot.get_chat_member(chat_id, selected_user_id)
        status = member.status
    
        await bot.restrict_chat_member(
                    chat_id=chat_id,
                    user_id=selected_user_id,
                    permissions=ChatPermissions(
                        can_send_messages=True
                    )
                )
        
        await delete_user(selected_user_id)
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ø—É–ª–∞.", show_alert=True)
        # await send_nickname_change_request(selected_user_id)
        await callback_query.message.delete()
    except Exception as e:
        await delete_user(selected_user_id)
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ø—É–ª–∞.", show_alert=True)
        # await send_nickname_change_request(selected_user_id)
        await callback_query.message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞ –≤—Å–µ—Ö –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data == 'ban_all_violator_users')
async def ban_all_violator_users(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    violator_users = await get_violator_users()

    if not violator_users:
        await callback_query.answer("–ù–µ—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π –¥–ª—è –±–∞–Ω–∞.", show_alert=True)
        await callback_query.message.delete()
        return

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö", callback_data="ban_all_violators_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_ban_all_violators")]
    ])

    await callback_query.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π ({len(violator_users)} —á–µ–ª.)?",
        reply_markup=confirm_kb
    )
    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'cancel_ban_all_violators')
async def cancel_ban_all_violators(callback_query: CallbackQuery):
    await callback_query.answer("–ë–∞–Ω –æ—Ç–º–µ–Ω—ë–Ω.")
    await callback_query.message.delete()

@router.callback_query(lambda c: c.data == 'ban_all_violators_confirm')
async def ban_all_violators_confirm(callback_query: CallbackQuery):
    admin_user_id = callback_query.from_user.id
    if not await is_user_admin(admin_user_id):
        return

    violator_users = await get_violator_users()

    if not violator_users:
        await callback_query.answer("–ù–µ—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π –¥–ª—è –±–∞–Ω–∞.", show_alert=True)
        await callback_query.message.delete()
        return

    success_count = 0
    for user in violator_users:
        user_id = user['user_id']
        chat_id = user['chat_id']
        try:
            await callback_query.bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
            await add_banned_user(user_id)
            success_count += 1
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_user_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    await callback_query.answer(f"–ó–∞–±–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {success_count}.", show_alert=True)
    await callback_query.message.delete()