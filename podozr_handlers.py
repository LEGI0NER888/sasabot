###################################################
####–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π –≤ –Ω–∏–∫–Ω–µ–π–º–∞—Ö####
###################################################

from aiogram import F, Router
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton,
    InlineKeyboardMarkup
)


from aiogram.fsm.context import FSMContext

from show_handlers import is_user_admin, FunctionStates
from database import (
    get_forbidden_nickname_emojis, get_forbidden_nickname_words, add_forbidden_nickname_emoji, 
    add_forbidden_nickname_word, remove_forbidden_nickname_emoji, remove_forbidden_nickname_word
)
router = Router()
@router.callback_query(lambda c: c.data == "add_nickname_words")
async def process_add_nickname_words(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è <b>–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã</b>. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Ñ—Ä–∞–∑—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>—Å–ª–æ–≤–æ1 —Å–ª–æ–≤–æ2 \"—Ñ—Ä–∞–∑–∞ –¥–ª—è –±–∞–Ω–∞\"</code>",
        parse_mode='HTML'
    )
    await state.set_state(FunctionStates.waiting_for_nickname_words_to_add)
    await callback_query.answer()


@router.message(FunctionStates.waiting_for_nickname_words_to_add)
async def add_nickname_words_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_user_admin(user_id):
        return

    text = message.text

    import shlex
    try:
        words_to_add = shlex.split(text)
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    added_words = []
    for word in words_to_add:
        await add_forbidden_nickname_word(word)
        added_words.append(word.lower())

    if added_words:
        await message.answer(
            f"–°–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã <b>{', '.join(added_words)}</b> –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.",
            parse_mode='HTML'
        )
    else:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã —É–∂–µ –±—ã–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.")

    await state.clear()


@router.callback_query(lambda c: c.data == "remove_nickname_words")
async def process_remove_nickname_words(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è <b>—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤</b>. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Ñ—Ä–∞–∑—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>—Å–ª–æ–≤–æ1 —Å–ª–æ–≤–æ2 \"—Ñ—Ä–∞–∑–∞ –¥–ª—è –±–∞–Ω–∞\"</code>",
        parse_mode='HTML'
    )
    await state.set_state(FunctionStates.waiting_for_nickname_words_to_remove)
    await callback_query.answer()


@router.message(FunctionStates.waiting_for_nickname_words_to_remove)
async def remove_nickname_words_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_user_admin(user_id):
        return

    text = message.text

    import shlex
    try:
        words_to_remove = shlex.split(text)
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    removed_words = []
    for word in words_to_remove:
        await remove_forbidden_nickname_word(word)
        removed_words.append(word.lower())

    if removed_words:
        await message.answer(
            f"–°–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã <b>{', '.join(removed_words)}</b> —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.",
            parse_mode='HTML'
        )
    else:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤/—Ñ—Ä–∞–∑ –Ω–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.")

    await state.clear()


@router.callback_query(lambda c: c.data == 'show_forbidden_nickname_words')
async def process_show_forbidden_nickname_words(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    forbidden_nickname_words = await get_forbidden_nickname_words()
    if forbidden_nickname_words:
        words_list = ', '.join(sorted(forbidden_nickname_words))
        message_text = f"üö´–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∏–∫–Ω–µ–π–º–∞—Ö:\n{words_list}"
    else:
        message_text = "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ –Ω–∏–∫–Ω–µ–π–º–∞—Ö –ø—É—Å—Ç"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ]
    )
    await callback_query.message.answer(message_text, parse_mode='HTML', reply_markup=kb)
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "add_nickname_emojis")
async def process_add_nickname_emojis(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è <b>–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã</b>. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
        "–ü—Ä–∏–º–µ—Ä: üòà ü§¨",
        parse_mode='HTML'
    )
    await state.set_state(FunctionStates.waiting_for_nickname_emojis_to_add)
    await callback_query.answer()


@router.message(FunctionStates.waiting_for_nickname_emojis_to_add)
async def add_nickname_emojis_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_user_admin(user_id):
        return

    emojis_to_add = message.text.strip().split()
    added_emojis = []
    for emoji in emojis_to_add:
        await add_forbidden_nickname_emoji(emoji)
        added_emojis.append(emoji)

    if added_emojis:
        await message.answer(
            f"–≠–º–æ–¥–∑–∏ <b>{' '.join(added_emojis)}</b> –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.",
            parse_mode='HTML'
        )
    else:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ —É–∂–µ –±—ã–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.")

    await state.clear()

@router.callback_query(lambda c: c.data == "remove_nickname_emojis")
async def process_remove_nickname_emojis(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è <b>—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤</b>. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
        "–ü—Ä–∏–º–µ—Ä: üòà ü§¨",
        parse_mode='HTML'
    )
    await state.set_state(FunctionStates.waiting_for_nickname_emojis_to_remove)
    await callback_query.answer()

@router.message(FunctionStates.waiting_for_nickname_emojis_to_remove)
async def remove_nickname_emojis_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_user_admin(user_id):
        return

    emojis_to_remove = message.text.strip().split()
    removed_emojis = []
    for emoji in emojis_to_remove:
        await remove_forbidden_nickname_emoji(emoji)
        removed_emojis.append(emoji)

    if removed_emojis:
        await message.answer(
            f"–≠–º–æ–¥–∑–∏ <b>{' '.join(removed_emojis)}</b> —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.",
            parse_mode='HTML'
        )
    else:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –Ω–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.")

    await state.clear()


@router.callback_query(lambda c: c.data == 'show_forbidden_nickname_emojis')
async def process_show_forbidden_nickname_emojis(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    forbidden_nickname_emojis = await get_forbidden_nickname_emojis()
    if forbidden_nickname_emojis:
        emojis_list = ' '.join(sorted(forbidden_nickname_emojis))
        message_text = f"üö´–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–∞—Ö:\n{emojis_list}"
    else:
        message_text = "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–∞—Ö –ø—É—Å—Ç"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ]
    )
    await callback_query.message.answer(message_text, parse_mode='HTML', reply_markup=kb)
    await callback_query.answer()
