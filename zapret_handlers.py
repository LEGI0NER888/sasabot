

import re
import logging
from aiogram import F, Router
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton,
    InlineKeyboardMarkup
)
from show_handlers import is_user_admin, FunctionStates
from aiogram.fsm.context import FSMContext
from collections import defaultdict
from rapidfuzz import fuzz

from config.config_bot import bot, GROUP_ID, ADMINS, CHANNEL_ID
from database import (
    get_forbidden_words, add_forbidden_word, remove_forbidden_word,
    clear_forbidden_words, get_setting,
    get_user, get_user, add_or_update_user,
    get_forbidden_nickname_emojis, get_forbidden_nickname_words
)

router = Router()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
@router.callback_query(lambda c: c.data == 'confirm_clear_words')
async def confirm_clear_words(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞", callback_data="clear_words")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_clear_words")]
    ])

    await callback_query.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞?", reply_markup=confirm_kb)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
@router.callback_query(lambda c: c.data == 'clear_words')
async def clear_words(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    await clear_forbidden_words()
    await callback_query.answer("–í—Å–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
@router.callback_query(lambda c: c.data == 'cancel_clear_words')
async def cancel_clear_words(callback_query: CallbackQuery):
    await callback_query.answer("–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞" —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫—Ä—ã—Ç—å"
@router.callback_query(lambda c: c.data == 'show_forbidden_words')
async def process_show_forbidden_words(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):

        return

    forbidden_words = await get_forbidden_words()
    if forbidden_words:
        words_list = ', '.join(sorted(forbidden_words))
        message_text = f"üö´–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n{words_list}"
    else:
        message_text = "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ]
    )
    await callback_query.message.answer(message_text, parse_mode='HTML', reply_markup=kb)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞"
@router.callback_query(lambda c: c.data == "add_words")
async def process_add_words(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è <b>–¥–æ–±–∞–≤–ª–µ–Ω–∏—è</b>. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Ñ—Ä–∞–∑—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>—Å–ª–æ–≤–æ1 —Å–ª–æ–≤–æ2 \"—Ñ—Ä–∞–∑–∞ –¥–ª—è –±–∞–Ω–∞\"</code>",
        parse_mode='HTML'
    )
    await state.set_state(FunctionStates.waiting_for_words_to_add)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞"
@router.callback_query(lambda c: c.data == "remove_words")
async def process_remove_words(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è <b>—É–¥–∞–ª–µ–Ω–∏—è</b>. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Ñ—Ä–∞–∑—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>—Å–ª–æ–≤–æ1 —Å–ª–æ–≤–æ2 \"—Ñ—Ä–∞–∑–∞ –¥–ª—è –±–∞–Ω–∞\"</code>",
        parse_mode='HTML'
    )
    await state.set_state(FunctionStates.waiting_for_words_to_remove)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@router.message(FunctionStates.waiting_for_words_to_add)
async def add_words_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_user_admin(user_id):
        return

    text = message.text

    import shlex
    try:
        words_to_add = shlex.split(text)
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    added_words = []
    for word in words_to_add:
        await add_forbidden_word(word)
        added_words.append(word.lower())

    if added_words:
        await message.answer(
            f"–°–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã <b>{', '.join(added_words)}</b> –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.",
            parse_mode='HTML'
        )
    else:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã —É–∂–µ –±—ã–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.")

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.message(FunctionStates.waiting_for_words_to_remove)
async def remove_words_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_user_admin(user_id):
        return

    text = message.text

    import shlex
    try:
        words_to_remove = shlex.split(text)
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    removed_words = []
    for word in words_to_remove:
        await remove_forbidden_word(word)
        removed_words.append(word.lower())

    if removed_words:
        await message.answer(
            f"–°–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã <b>{', '.join(removed_words)}</b> —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.",
            parse_mode='HTML'
        )
    else:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤/—Ñ—Ä–∞–∑ –Ω–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.")

    await state.clear()



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
def create_regex_pattern(word):
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –±—É–∫–≤—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
    escaped_letters = map(re.escape, word)
    pattern = '[^A-Za-z–ê-–Ø–∞-—è–Å—ë]*'.join(escaped_letters)
    return rf'\b{pattern}\b'  # –î–æ–±–∞–≤–ª—è–µ–º \b –¥–ª—è –≥—Ä–∞–Ω–∏—Ü —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–≥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

def transliterate_to_cyrillic(text):
    translit_map = {
        'a': '–∞', 'b': '–±', 'v': '–≤', 'g': '–≥', 'd': '–¥',
        'e': '–µ', 'z': '–∑', 'i': '–∏', 'k': '–∫', 'l': '–ª',
        'm': '–º', 'n': '–Ω', 'o': '–æ', 'p': '–ø', 'r': '—Ä',
        's': '—Å', 't': '—Ç', 'u': '—É', 'f': '—Ñ', 'h': '—Ö',
        'c': '—Ü', 'y': '—É', 'w': '—à', 'x': '–∫—Å', 'q': '–∫',

    }
    result = ''
    for char in text:
        result += translit_map.get(char, char)
    return result

last_command_time = None
rules = """, –≤–æ—Ç <b>–ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:</b>
\n1. –ù–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã <i>(—á–µ—Ä–µ–∑ /)</i>
\n2. –ë–µ–∑ –∑–∞–ø—Ä–µ—Ç–æ–∫
\n3. –°–ø–∞–º –Ω–∞–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è <i>–≤—Ä–µ–º–µ–Ω–Ω—ã–º</i> –º—É—Ç–æ–º - –æ—Å–æ–±–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π –º–æ–∂–µ—Ç <b><i>–∑–∞–º—É—Ç–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞!</i></b>"""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
message_counts = defaultdict(dict)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
@router.message(F.chat.id == GROUP_ID)
async def handle_group_message(message: Message):
    text = message.text or message.caption
    chat_id = message.chat.id
    message_id = message.message_id
    thread_id = message.message_thread_id

    user_id = message.from_user.id

    if chat_id not in message_counts:
        message_counts[chat_id] = {}

    delete_message_count = int(await get_setting("delete_message_count") or 5)
    first_post_message = await get_setting("first_post_message") or (
        "–Ø —Å–ª–µ–∂—É —á—Ç–æ–±—ã –≤—ã –Ω–µ –ø–∏—Å–∞–ª–∏ –≥–∞–¥–æ—Å—Ç–∏, –∫—Ç–æ –æ—Å–ª—É—à–∞–µ—Ç—Å—è: –±—É–¥–µ—Ç –Ω–∞–∫–∞–∑–∞–Ωüëáüèªüëáüèªüëáüèª"
    )

    if message.from_user and message.from_user.id == bot.id:
        return

    if message.entities:
        for entity in message.entities:
            if entity.type == 'bot_command':
                try:
                    await message.delete()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
                return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞—Ç—É—Å
    user_data = await get_user(user_id)

    if user_data and user_data['status'] in ['suspicious', 'violator']:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–º–µ—á–µ–Ω, –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
        pass
    else:
        full_name = message.from_user.full_name or ''
        lower_full_name = full_name.lower()
        forbidden_emojis = await get_forbidden_nickname_emojis()
        forbidden_words_nickname = await get_forbidden_nickname_words()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
        has_forbidden_emoji = any(emoji in full_name for emoji in forbidden_emojis)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        has_forbidden_word_nickname = any(word in lower_full_name for word in forbidden_words_nickname)

        if has_forbidden_emoji and has_forbidden_word_nickname:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–º
            await add_or_update_user(user_id, message.chat.id, mute_count=0, last_mute_time=None, status='violator')
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å")
        elif has_forbidden_emoji or has_forbidden_word_nickname:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º
            await add_or_update_user(user_id, message.chat.id, mute_count=0, last_mute_time=None, status='suspicious')
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π")
    
    if message.sender_chat and message.sender_chat.id == CHANNEL_ID and not thread_id:
        try:
            await message.reply(first_post_message)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å—Ç ID: {message_id} –≤ —á–∞—Ç–µ ID: {chat_id}")
            message_counts[chat_id][message_id] = 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return
    
    if thread_id and thread_id in message_counts[chat_id]:
        delete_count = message_counts[chat_id][thread_id]

        if delete_count < delete_message_count:
            try:
                await message.delete()
                delete_count += 1
                message_counts[chat_id][thread_id] = delete_count

                if delete_count >= delete_message_count:
                    del message_counts[chat_id][thread_id]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    if text:
        forbidden_words = await get_forbidden_words()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > 300:
            try:
                await message.delete()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return

        lower_text = transliterate_to_cyrillic(text.lower())

        threshold = 70  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

        for word in forbidden_words:
            pattern = create_regex_pattern(word)
            similarity = fuzz.ratio(lower_text, word.lower())

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º
            if re.search(pattern, lower_text) or similarity >= threshold:
                try:
                    await message.delete()
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º '{word}'")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}: {e}")
                break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    