# handlers.py
from datetime import datetime, timedelta
from aiogram.enums import ParseMode
import re
import logging
from aiogram import F, Router
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton,
    InlineKeyboardMarkup, ChatPermissions
)

from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from collections import defaultdict
from rapidfuzz import fuzz

from config.config_bot import bot, GROUP_ID, ADMINS, CHANNEL_ID
from database import (
    get_forbidden_words, add_forbidden_word, remove_forbidden_word,
    clear_forbidden_words, get_setting, update_setting,
    get_user_data, reset_user_mute_count, get_permanently_banned_users,
    get_users_with_mutes_less_than_3,get_user, get_user, add_or_update_user, delete_user,
    get_suspicious_users, get_violator_users, add_banned_user, update_status_to_normal,
    get_forbidden_nickname_emojis, get_forbidden_nickname_words, add_forbidden_nickname_emoji, 
    add_forbidden_nickname_word, remove_forbidden_nickname_emoji, remove_forbidden_nickname_word
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

class FunctionStates(StatesGroup):
    change_first_post_message = State()
    change_delete_message_count = State()
    waiting_for_words_to_add = State()
    waiting_for_words_to_remove = State()
    waiting_for_nickname_words_to_add = State()
    waiting_for_nickname_words_to_remove = State()
    waiting_for_nickname_emojis_to_add = State()
    waiting_for_nickname_emojis_to_remove = State()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
message_counts = defaultdict(dict)

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ
welcome_sent = {}  # –ö–ª—é—á: thread_id, –ó–Ω–∞—á–µ–Ω–∏–µ: True/False

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
last_command_times = {}


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_user_admin(user_id):
    return str(user_id) in ADMINS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart(), F.chat.type == 'private')
async def cmd_start(message: Message):
    user_id = message.from_user.id
    if await is_user_admin(user_id):
        anti_spam_status = "–í–∫–ª—é—á–µ–Ω" if await get_setting('anti_spam_enabled') == '1' else "–û—Ç–∫–ª—é—á–µ–Ω"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üíÄ –ó–∞–ø—Ä–µ—Ç–∫–∏ üíÄ", callback_data="zapret_words_kb")],
                [InlineKeyboardButton(text="ü§° –ó–∞–ø—Ä–µ—Ç–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã ü§°", callback_data="zapret_nicknames_kb")],
                [InlineKeyboardButton(text="üí¶ –ó–∞–ø—Ä–µ—Ç–Ω—ã–µ —ç–º–æ–¥–∂–∏ üí¶", callback_data="zapret_emoji_kb")],
                [InlineKeyboardButton(text="üîí –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ üîí", callback_data="show_permanently_banned_users")],
                [InlineKeyboardButton(text="üîá –†–∞–∑–º—É—Ç –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö üîá", callback_data="unban_users_with_less_than_3_mutes")],
                [InlineKeyboardButton(text="üîç –ü–æ–¥–æ–∑—Ä–µ–Ω–∏—è üîç", callback_data="suspicions_menu")],
                [InlineKeyboardButton(text=f"‚å®Ô∏è [–ê–Ω—Ç–∏—Å–ø–∞–º: {anti_spam_status}] ‚å®Ô∏è", callback_data="toggle_anti_spam")],
                [InlineKeyboardButton(text="‚úâÔ∏è [–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π] ‚úâÔ∏è", callback_data="change_delete_count")],
                [InlineKeyboardButton(text="‚úèÔ∏è [–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 1-–≥–æ –ø–æ—Å—Ç–∞] ‚úèÔ∏è", callback_data="change_first_post_message")],
                
            ]
        )
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=kb)
    else:
        return
    
@router.callback_query(lambda c: c.data == 'zapret_words_kb')
async def zapret_words(callback_query: CallbackQuery):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ ‚ûï", callback_data="add_words")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞ ‚ûñ", callback_data="remove_words")],
            [InlineKeyboardButton(text="‚õîÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ ‚õîÔ∏è", callback_data="show_forbidden_words")],
            [InlineKeyboardButton(text="üßπ [–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤] üßπ", callback_data="confirm_clear_words")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ]
    )
    await callback_query.message.answer('–ó–ê–ü–†–ï–¢–ö–ò (–í –ß–ê–¢–ï)', parse_mode='HTML', reply_markup=kb)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'zapret_nicknames_kb')
async def zapret_nicknames(callback_query: CallbackQuery):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤ ‚ûï", callback_data="add_nickname_words")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤ ‚ûñ", callback_data="remove_nickname_words")],
            [InlineKeyboardButton(text="‚õîÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∏–∫–Ω–µ–π–º–∞—Ö ‚õîÔ∏è", callback_data="show_forbidden_nickname_words")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ]
    )
    await callback_query.message.answer('–ó–ê–ü–†–ï–¢–ù–´–ï –ù–ò–ö–ù–ï–ô–ú–´', parse_mode='HTML', reply_markup=kb)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'zapret_emoji_kb')
async def zapret_emoji(callback_query: CallbackQuery):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤ ‚ûï", callback_data="add_nickname_emojis")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤ ‚ûñ", callback_data="remove_nickname_emojis")],
            [InlineKeyboardButton(text="‚õîÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–∞—Ö ‚õîÔ∏è", callback_data="show_forbidden_nickname_emojis")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ]
    )
    await callback_query.message.answer('–ó–ê–ü–†–ï–¢–ù–´–ï –≠–ú–û–î–ó–ò (–í –ù–ò–ö–ê–•)', parse_mode='HTML', reply_markup=kb)
    await callback_query.answer()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
@router.callback_query(lambda c: c.data == 'toggle_anti_spam')
async def toggle_anti_spam(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    current_value = await get_setting('anti_spam_enabled')
    new_value = '0' if current_value == '1' else '1'
    await update_setting('anti_spam_enabled', new_value)
    status = "–≤–∫–ª—é—á–µ–Ω–∞" if new_value == '1' else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
    await callback_query.answer(f"–ê–Ω—Ç–∏—Å–ø–∞–º–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ {status}.", show_alert=True)

    anti_spam_status = "–í–∫–ª—é—á–µ–Ω" if new_value == '1' else "–û—Ç–∫–ª—é—á–µ–Ω"
    kb = callback_query.message.reply_markup
    for row in kb.inline_keyboard:
        for button in row:
            if button.callback_data == 'toggle_anti_spam':
                button.text = f"–ê–Ω—Ç–∏—Å–ø–∞–º: {anti_spam_status}"
    await callback_query.message.edit_reply_markup(reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
@router.callback_query(lambda c: c.data == 'confirm_clear_words')
async def confirm_clear_words(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞", callback_data="clear_words")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_clear_words")]
    ])

    await callback_query.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞?", reply_markup=confirm_kb)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
@router.callback_query(lambda c: c.data == 'clear_words')
async def clear_words(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    await clear_forbidden_words()
    await callback_query.answer("–í—Å–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
@router.callback_query(lambda c: c.data == 'cancel_clear_words')
async def cancel_clear_words(callback_query: CallbackQuery):
    await callback_query.answer("–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞" —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫—Ä—ã—Ç—å"
@router.callback_query(lambda c: c.data == 'show_forbidden_words')
async def process_show_forbidden_words(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):

        return

    forbidden_words = await get_forbidden_words()
    if forbidden_words:
        words_list = ', '.join(sorted(forbidden_words))
        message_text = f"üö´–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n{words_list}"
    else:
        message_text = "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ]
    )
    await callback_query.message.answer(message_text, parse_mode='HTML', reply_markup=kb)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞"
@router.callback_query(lambda c: c.data == "add_words")
async def process_add_words(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è <b>–¥–æ–±–∞–≤–ª–µ–Ω–∏—è</b>. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Ñ—Ä–∞–∑—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>—Å–ª–æ–≤–æ1 —Å–ª–æ–≤–æ2 \"—Ñ—Ä–∞–∑–∞ –¥–ª—è –±–∞–Ω–∞\"</code>",
        parse_mode='HTML'
    )
    await state.set_state(FunctionStates.waiting_for_words_to_add)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞"
@router.callback_query(lambda c: c.data == "remove_words")
async def process_remove_words(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è <b>—É–¥–∞–ª–µ–Ω–∏—è</b>. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Ñ—Ä–∞–∑—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>—Å–ª–æ–≤–æ1 —Å–ª–æ–≤–æ2 \"—Ñ—Ä–∞–∑–∞ –¥–ª—è –±–∞–Ω–∞\"</code>",
        parse_mode='HTML'
    )
    await state.set_state(FunctionStates.waiting_for_words_to_remove)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@router.message(FunctionStates.waiting_for_words_to_add)
async def add_words_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_user_admin(user_id):
        return

    text = message.text

    import shlex
    try:
        words_to_add = shlex.split(text)
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    added_words = []
    for word in words_to_add:
        await add_forbidden_word(word)
        added_words.append(word.lower())

    if added_words:
        await message.answer(
            f"–°–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã <b>{', '.join(added_words)}</b> –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.",
            parse_mode='HTML'
        )
    else:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã —É–∂–µ –±—ã–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.")

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.message(FunctionStates.waiting_for_words_to_remove)
async def remove_words_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_user_admin(user_id):
        return

    text = message.text

    import shlex
    try:
        words_to_remove = shlex.split(text)
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    removed_words = []
    for word in words_to_remove:
        await remove_forbidden_word(word)
        removed_words.append(word.lower())

    if removed_words:
        await message.answer(
            f"–°–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã <b>{', '.join(removed_words)}</b> —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.",
            parse_mode='HTML'
        )
    else:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤/—Ñ—Ä–∞–∑ –Ω–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.")

    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
def create_regex_pattern(word):
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –±—É–∫–≤—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
    escaped_letters = map(re.escape, word)
    pattern = '[^A-Za-z–ê-–Ø–∞-—è–Å—ë]*'.join(escaped_letters)
    return rf'\b{pattern}\b'  # –î–æ–±–∞–≤–ª—è–µ–º \b –¥–ª—è –≥—Ä–∞–Ω–∏—Ü —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–≥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

def transliterate_to_cyrillic(text):
    translit_map = {
        'a': '–∞', 'b': '–±', 'v': '–≤', 'g': '–≥', 'd': '–¥',
        'e': '–µ', 'z': '–∑', 'i': '–∏', 'k': '–∫', 'l': '–ª',
        'm': '–º', 'n': '–Ω', 'o': '–æ', 'p': '–ø', 'r': '—Ä',
        's': '—Å', 't': '—Ç', 'u': '—É', 'f': '—Ñ', 'h': '—Ö',
        'c': '—Ü', 'y': '—É', 'w': '—à', 'x': '–∫—Å', 'q': '–∫',

    }
    result = ''
    for char in text:
        result += translit_map.get(char, char)
    return result

last_command_time = None
rules = """, –≤–æ—Ç <b>–ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:</b>
\n1. –ù–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã <i>(—á–µ—Ä–µ–∑ /)</i>
\n2. –ë–µ–∑ –∑–∞–ø—Ä–µ—Ç–æ–∫
\n3. –°–ø–∞–º –Ω–∞–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è <i>–≤—Ä–µ–º–µ–Ω–Ω—ã–º</i> –º—É—Ç–æ–º - –æ—Å–æ–±–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π –º–æ–∂–µ—Ç <b><i>–∑–∞–º—É—Ç–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞!</i></b>"""



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
@router.message(F.chat.id == GROUP_ID)
async def handle_group_message(message: Message):
    text = message.text or message.caption
    chat_id = message.chat.id
    message_id = message.message_id
    thread_id = message.message_thread_id

    user_id = message.from_user.id

    if chat_id not in message_counts:
        message_counts[chat_id] = {}

    delete_message_count = int(await get_setting("delete_message_count") or 5)
    first_post_message = await get_setting("first_post_message") or (
        "–Ø —Å–ª–µ–∂—É —á—Ç–æ–±—ã –≤—ã –Ω–µ –ø–∏—Å–∞–ª–∏ –≥–∞–¥–æ—Å—Ç–∏, –∫—Ç–æ –æ—Å–ª—É—à–∞–µ—Ç—Å—è: –±—É–¥–µ—Ç –Ω–∞–∫–∞–∑–∞–Ωüëáüèªüëáüèªüëáüèª"
    )

    if message.from_user and message.from_user.id == bot.id:
        return

    if message.entities:
        for entity in message.entities:
            if entity.type == 'bot_command':
                try:
                    await message.delete()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
                return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞—Ç—É—Å
    user_data = await get_user(user_id)

    if user_data and user_data['status'] in ['suspicious', 'violator']:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–º–µ—á–µ–Ω, –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
        pass
    else:
        full_name = message.from_user.full_name or ''
        lower_full_name = full_name.lower()
        forbidden_emojis = await get_forbidden_nickname_emojis()
        forbidden_words_nickname = await get_forbidden_nickname_words()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
        has_forbidden_emoji = any(emoji in full_name for emoji in forbidden_emojis)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        has_forbidden_word_nickname = any(word in lower_full_name for word in forbidden_words_nickname)

        if has_forbidden_emoji and has_forbidden_word_nickname:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–º
            await add_or_update_user(user_id, message.chat.id, mute_count=0, last_mute_time=None, status='violator')
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å")
        elif has_forbidden_emoji or has_forbidden_word_nickname:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º
            await add_or_update_user(user_id, message.chat.id, mute_count=0, last_mute_time=None, status='suspicious')
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π")

    if message.sender_chat and message.sender_chat.id == CHANNEL_ID and not thread_id:
        try:
            await message.reply(first_post_message)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å—Ç ID: {message_id} –≤ —á–∞—Ç–µ ID: {chat_id}")
            message_counts[chat_id][message_id] = 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return
    
    if thread_id and thread_id in message_counts[chat_id]:
        delete_count = message_counts[chat_id][thread_id]

        if delete_count < delete_message_count:
            try:
                await message.delete()
                delete_count += 1
                message_counts[chat_id][thread_id] = delete_count

                if delete_count >= delete_message_count:
                    del message_counts[chat_id][thread_id]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    if text:
        forbidden_words = await get_forbidden_words()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > 300:
            try:
                await message.delete()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return

        lower_text = transliterate_to_cyrillic(text.lower())

        threshold = 70  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

        for word in forbidden_words:
            pattern = create_regex_pattern(word)
            similarity = fuzz.ratio(lower_text, word.lower())

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º
            if re.search(pattern, lower_text) or similarity >= threshold:
                try:
                    await message.delete()
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º '{word}'")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}: {e}")
                break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@router.callback_query(lambda c: c.data.startswith('show_permanently_banned_users'))
async def show_permanently_banned_users(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    data_parts = callback_query.data.split(':')
    if len(data_parts) > 1 and data_parts[1].startswith('page='):
        page_number = int(data_parts[1].split('=')[1])
    else:
        page_number = 1

    banned_users = await get_permanently_banned_users()

    if banned_users:
        users_per_page = 10
        total_pages = (len(banned_users) + users_per_page - 1) // users_per_page

        if page_number < 1:
            page_number = 1
        elif page_number > total_pages:
            page_number = total_pages

        start_index = (page_number - 1) * users_per_page
        end_index = start_index + users_per_page
        users_on_page = banned_users[start_index:end_index]

        keyboard_buttons = []
        for user in users_on_page:
            user_text = f"ID: {user['user_id']}"
            button = [InlineKeyboardButton(text=user_text, callback_data=f"select_banned_user_{user['user_id']}")]
            keyboard_buttons.append(button)

        nav_buttons = []
        if page_number > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"show_permanently_banned_users:page={page_number - 1}"))
        if page_number < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"show_permanently_banned_users:page={page_number + 1}"))

        unban_all_button = [InlineKeyboardButton(text="üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö", callback_data="unban_all_permanently_banned_users")]

        close_button = [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]

        kb = InlineKeyboardMarkup(
            inline_keyboard=keyboard_buttons + [nav_buttons] + [unban_all_button] + [close_button]
        )

        try:
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –∏–ª–∏ —Ä–∞–∑–±–∞–Ω—å—Ç–µ –≤—Å–µ—Ö:", reply_markup=kb)
        except Exception:
            await callback_query.message.edit_reply_markup(reply_markup=kb)

    else:
        await callback_query.message.answer("–ù–µ—Ç –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]]
        ))
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–±–∞–Ω–∞ –≤—Å–µ—Ö –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data == 'unban_all_permanently_banned_users')
async def confirm_unban_all_permanently_banned_users(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —Ä–∞–∑–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö", callback_data="unban_all_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_unban_all")]
    ])

    await callback_query.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?", reply_markup=confirm_kb)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞–∑–±–∞–Ω–∞ –≤—Å–µ—Ö
@router.callback_query(lambda c: c.data == 'cancel_unban_all')
async def cancel_unban_all(callback_query: CallbackQuery):
    await callback_query.answer("–†–∞–∑–±–∞–Ω –æ—Ç–º–µ–Ω—ë–Ω.")
    await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–±–∞–Ω–∞ –≤—Å–µ—Ö –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data == 'unban_all_confirm')
async def unban_all_confirm(callback_query: CallbackQuery):
    admin_user_id = callback_query.from_user.id
    if not await is_user_admin(admin_user_id):
        return

    banned_users = await get_permanently_banned_users()

    if not banned_users:
        await callback_query.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞.", show_alert=True)
        await callback_query.message.delete()
        return

    success_count = 0
    for user in banned_users:
        user_id = user['user_id']
        chat_id = user['chat_id']
        try:
            await callback_query.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(can_send_messages=True)
            )
            await update_status_to_normal(user_id)

            await reset_user_mute_count(user_id)
            await delete_user(user_id)
            success_count += 1
            # logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_user_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    await callback_query.answer(f"–†–∞–∑–±–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {success_count}.", show_alert=True)
    await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞
@router.callback_query(lambda c: c.data.startswith('select_banned_user_'))
async def select_banned_user(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    selected_user_id = int(callback_query.data.split('_')[-1])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"unban_user_{selected_user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_unban_user")]
    ])

    await callback_query.message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user_id}?", reply_markup=keyboard)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞–∑–±–∞–Ω–∞
@router.callback_query(lambda c: c.data == 'cancel_unban_user')
async def cancel_unban_user(callback_query: CallbackQuery):
    await callback_query.answer("–†–∞–∑–±–∞–Ω –æ—Ç–º–µ–Ω—ë–Ω.")
    await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda c: c.data.startswith('unban_user_'))
async def unban_user(callback_query: CallbackQuery):
    admin_user_id = callback_query.from_user.id
    if not await is_user_admin(admin_user_id):
        return

    selected_user_id = int(callback_query.data.split('_')[2])
    user_data = await get_user_data(selected_user_id)

    if user_data:
        chat_id = user_data['chat_id']
        try:
            await callback_query.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=selected_user_id,
                permissions=ChatPermissions(can_send_messages=True)
            )
            await update_status_to_normal(selected_user_id)
            await reset_user_mute_count(selected_user_id)
            await delete_user(selected_user_id)
            await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.", show_alert=True)
            await callback_query.message.delete()
            # logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_user_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user_id}: {e}")
            await callback_query.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user_id}.", show_alert=True)
    else:
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö.", show_alert=True)
        await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞
@router.callback_query(lambda c: c.data == 'change_first_post_message')
async def prompt_for_new_post_message(callback_query: CallbackQuery, state: FSMContext):
    first_message = await get_setting("first_post_message")
    await callback_query.message.answer(f"<b>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–µ–π—á–∞—Å: \n<i>{first_message}</i></b>\n\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞:", parse_mode=ParseMode.HTML,reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_message_and_state")]]
            ))
    await state.set_state(FunctionStates.change_first_post_message)
    await callback_query.answer()

@router.message(FunctionStates.change_first_post_message)
async def change_first_post_message(message: Message, state: FSMContext):
    new_message = message.text
    await update_setting("first_post_message", new_message)
    await message.answer(
        f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n\n{new_message}",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]]
        )
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∞ —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(lambda c: c.data == 'change_delete_count')
async def prompt_for_new_delete_count(callback_query: CallbackQuery, state: FSMContext):
    counter = await get_setting("delete_message_count")
    await callback_query.message.answer(f"<b>–ß–∏—Å–ª–æ —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–π—á–∞—Å:\t<i>{counter}</i></b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", parse_mode=ParseMode.HTML,reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_message_and_state")]]
            ))
    await state.set_state(FunctionStates.change_delete_message_count)
    await callback_query.answer()

@router.message(FunctionStates.change_delete_message_count)
async def change_delete_message_count(message: Message, state: FSMContext):
    try:
        new_count = int(message.text)
        await update_setting("delete_message_count", str(new_count))
        await message.answer(
            f"–ù–æ–≤–æ–µ —á–∏—Å–ª–æ —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_count}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]]
            )
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
@router.callback_query(lambda c: c.data == 'close_message')
async def close_message(callback_query: CallbackQuery):
    await callback_query.message.delete()
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
@router.callback_query(lambda c: c.data == 'close_message_and_state')
async def close_message_and_state(callback_query: CallbackQuery,state: FSMContext):
    await callback_query.message.delete()
    await state.clear()
    await callback_query.answer()





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º—É—Ç–∞–º–∏ < 3
@router.callback_query(lambda c: c.data == 'unban_users_with_less_than_3_mutes')
async def confirm_unban_users(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    users_to_unban = await get_users_with_mutes_less_than_3()
    count = len(users_to_unban)

    if count == 0:
        await callback_query.message.answer(
            "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]]
            )
        )
        await callback_query.answer()
        return

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —Ä–∞–∑–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö", callback_data="unban_users_confirm")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_unban_users")]
    ])

    await callback_query.message.answer(
        f"–ù–∞–π–¥–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º—É—Ç–∞–º–∏ –º–µ–Ω—å—à–µ 3. –í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –∏—Ö –≤—Å–µ—Ö?",
        reply_markup=confirm_kb
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞–∑–±–∞–Ω–∞
@router.callback_query(lambda c: c.data == 'cancel_unban_users')
async def cancel_unban_users(callback_query: CallbackQuery):
    await callback_query.answer("–†–∞–∑–±–∞–Ω –æ—Ç–º–µ–Ω—ë–Ω.")
    await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–±–∞–Ω–∞
@router.callback_query(lambda c: c.data == 'unban_users_confirm')
async def unban_users_confirm(callback_query: CallbackQuery):
    
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    users_to_unban = await get_users_with_mutes_less_than_3()

    for user in users_to_unban:
        try:
            await callback_query.bot.restrict_chat_member(
                chat_id=user['chat_id'],
                user_id=user['user_id'],
                permissions=ChatPermissions(can_send_messages=True)
            )
            await add_or_update_user(user['user_id'], user['chat_id'], 0, None)
            # logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ —Å—á–µ—Ç—á–∏–∫ –º—É—Ç–æ–≤ —Å–±—Ä–æ—à–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {e}")

    await callback_query.answer("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –º—É—Ç–∞–º–∏ –º–µ–Ω—å—à–µ 3 —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
    await callback_query.message.delete()

##############
###–≠–†–û-–±–æ—Ç—ã###
##############

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏—è"
@router.callback_query(lambda c: c.data == 'suspicions_menu')
async def show_suspicions_menu(callback_query: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ", callback_data="show_suspicious_users")],
        [InlineKeyboardButton(text="üö´ –ù–∞—Ä—É—à–∏—Ç–µ–ª–∏", callback_data="show_violator_users")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
    ])
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data.startswith('show_suspicious_users'))
async def show_suspicious_users(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    suspicious_users = await get_suspicious_users()

    if suspicious_users:
        users_per_page = 10
        page_number = 1  # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –æ–ø—É—â–µ–Ω–∞
        keyboard_buttons = []
        for user in suspicious_users:
            try:
                user_chat = await bot.get_chat(user['user_id'])
                user_full_name = user_chat.full_name
            except:
                user_full_name = f"ID: {user['user_id']}"
            user_text = f"{user_full_name}"
            button = [InlineKeyboardButton(text=user_text, callback_data=f"select_suspicious_user_{user['user_id']}")]
            keyboard_buttons.append(button)

        kb = InlineKeyboardMarkup(
            inline_keyboard=keyboard_buttons + [
                [InlineKeyboardButton(text="üîí –ó–∞–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö", callback_data="ban_all_suspicious_users")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
            ]
        )

        await callback_query.message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=kb)
    else:
        await callback_query.message.answer("–ù–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]]
        ))
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data.startswith('show_violator_users'))
async def show_violator_users(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    violator_users = await get_violator_users()

    if violator_users:
        users_per_page = 10
        page_number = 1  # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –æ–ø—É—â–µ–Ω–∞
        keyboard_buttons = []
        for user in violator_users:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
            try:
                user_chat = await bot.get_chat(user['user_id'])
                user_full_name = user_chat.full_name
            except:
                user_full_name = f"ID: {user['user_id']}"
            user_text = f"{user_full_name}"
            button = [InlineKeyboardButton(text=user_text, callback_data=f"select_violator_user_{user['user_id']}")]
            keyboard_buttons.append(button)

        kb = InlineKeyboardMarkup(
            inline_keyboard=keyboard_buttons + [
                [InlineKeyboardButton(text="üîí –ó–∞–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö", callback_data="ban_all_violator_users")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
            ]
        )

        await callback_query.message.answer("–°–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π:", reply_markup=kb)
    else:
        await callback_query.message.answer("–ù–µ—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]]
        ))
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda c: c.data.startswith('select_suspicious_user_'))
async def select_suspicious_user(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    selected_user_id = int(callback_query.data.split('_')[-1])
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data = await get_user_data(selected_user_id)
    if user_data:
        user_chat = await bot.get_chat(selected_user_id)
        try:
            mention = f'@{user_chat.username}'
            user_profile_link = f'<a href="https://t.me/{user_chat.username}">{mention}</a>'
            
        except:
            user_full_name = user_chat.full_name
            link = f'tg://user?id={selected_user_id}'
            
            user_profile_link = f'<a href="{link}">{user_full_name}</a>'

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban_suspicious_user_{selected_user_id}")],
            [InlineKeyboardButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –∏–∑ –ø—É–ª–∞", callback_data=f"remove_suspicious_user_{selected_user_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_message")]
        ])

        await callback_query.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_profile_link}:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
        await callback_query.answer()
    else:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda c: c.data.startswith('ban_suspicious_user_'))
async def ban_suspicious_user(callback_query: CallbackQuery):
    admin_user_id = callback_query.from_user.id
    if not await is_user_admin(admin_user_id):
        return

    selected_user_id = int(callback_query.data.split('_')[-1])
    user_data = await get_user_data(selected_user_id)

    if user_data:
        chat_id = user_data['chat_id']
        try:
            await callback_query.bot.ban_chat_member(chat_id=chat_id, user_id=selected_user_id)
            await add_banned_user(selected_user_id)
            await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} –∑–∞–±–∞–Ω–µ–Ω.", show_alert=True)
            await callback_query.message.delete()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_user_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user_id}: {e}")
            await callback_query.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user_id}.", show_alert=True)
    else:
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—É–ª–∞
@router.callback_query(lambda c: c.data.startswith('remove_suspicious_user_'))
async def remove_suspicious_user(callback_query: CallbackQuery):
    chat_id = GROUP_ID
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    selected_user_id = int(callback_query.data.split('_')[-1])
    try:
        member = await bot.get_chat_member(chat_id, selected_user_id)
        status = member.status
    
        await bot.restrict_chat_member(
                    chat_id=chat_id,
                    user_id=selected_user_id,
                    permissions=ChatPermissions(
                        can_send_messages=True
                    )
                )
        
        await delete_user(selected_user_id)
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ø—É–ª–∞.", show_alert=True)
        # await send_nickname_change_request(selected_user_id)
        await callback_query.message.delete()
    except Exception as e:
        await delete_user(selected_user_id)
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ø—É–ª–∞.", show_alert=True)
        # await send_nickname_change_request(selected_user_id)
        await callback_query.message.delete()

# async def send_nickname_change_request(user_id):
#     try:
#         message_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à –Ω–∏–∫–Ω–µ–π–º —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —ç–º–æ–¥–∑–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ."
#         await bot.send_message(chat_id=user_id, text=message_text)
#         logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —Å –ø—Ä–æ—Å—å–±–æ–π —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º.")
#     except Exception as e:
#         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞ –≤—Å–µ—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data == 'ban_all_suspicious_users')
async def ban_all_suspicious_users(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    suspicious_users = await get_suspicious_users()

    if not suspicious_users:
        await callback_query.answer("–ù–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–∞–Ω–∞.", show_alert=True)
        await callback_query.message.delete()
        return

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö", callback_data="ban_all_suspicious_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_ban_all_suspicious")]
    ])

    await callback_query.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(suspicious_users)} —á–µ–ª.)?",
        reply_markup=confirm_kb
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –±–∞–Ω–∞ –≤—Å–µ—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data == 'cancel_ban_all_suspicious')
async def cancel_ban_all_suspicious(callback_query: CallbackQuery):
    await callback_query.answer("–ë–∞–Ω –æ—Ç–º–µ–Ω—ë–Ω.")
    await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∞–Ω–∞ –≤—Å–µ—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data == 'ban_all_suspicious_confirm')
async def ban_all_suspicious_confirm(callback_query: CallbackQuery):
    admin_user_id = callback_query.from_user.id
    if not await is_user_admin(admin_user_id):
        return

    suspicious_users = await get_suspicious_users()

    if not suspicious_users:
        await callback_query.answer("–ù–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–∞–Ω–∞.", show_alert=True)
        await callback_query.message.delete()
        return

    success_count = 0
    for user in suspicious_users:
        user_id = user['user_id']
        chat_id = user['chat_id']
        try:
            # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await callback_query.bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—É–ª–∞
            await add_banned_user(user_id)
            success_count += 1
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_user_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    await callback_query.answer(f"–ó–∞–±–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {success_count}.", show_alert=True)
    await callback_query.message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è
@router.callback_query(lambda c: c.data.startswith('select_violator_user_'))
async def select_violator_user(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    selected_user_id = int(callback_query.data.split('_')[-1])
    user_data = await get_user_data(selected_user_id)
    if user_data:
        user_chat = await bot.get_chat(selected_user_id)
        try:
            mention = f'@{user_chat.username}'
            user_profile_link = f'<a href="https://t.me/{user_chat.username}">{mention}</a>'
            
        except:
            user_full_name = user_chat.full_name
            link = f'tg://user?id={selected_user_id}'
            
            user_profile_link = f'<a href="{link}">{user_full_name}</a>'

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban_violator_user_{selected_user_id}")],
            [InlineKeyboardButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –∏–∑ –ø—É–ª–∞", callback_data=f"remove_violator_user_{selected_user_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_message")]
        ])

        await callback_query.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_profile_link}:",
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
        await callback_query.answer()
    else:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è
@router.callback_query(lambda c: c.data.startswith('ban_violator_user_'))
async def ban_violator_user(callback_query: CallbackQuery):
    admin_user_id = callback_query.from_user.id
    if not await is_user_admin(admin_user_id):
        return

    selected_user_id = int(callback_query.data.split('_')[-1])
    user_data = await get_user_data(selected_user_id)

    if user_data:
        chat_id = user_data['chat_id']
        try:
            await callback_query.bot.ban_chat_member(chat_id=chat_id, user_id=selected_user_id)
            await add_banned_user(selected_user_id)
            await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} –∑–∞–±–∞–Ω–µ–Ω.", show_alert=True)
            await callback_query.message.delete()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_user_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user_id}: {e}")
            await callback_query.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user_id}.", show_alert=True)
    else:
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è –∏–∑ –ø—É–ª–∞
@router.callback_query(lambda c: c.data.startswith('remove_violator_user_'))
async def remove_violator_user(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    if not await is_user_admin(user_id):
        return
    
    selected_user_id = int(callback_query.data.split('_')[-1])
    try:
        member = await bot.get_chat_member(chat_id, selected_user_id)
        status = member.status
    
        await bot.restrict_chat_member(
                    chat_id=chat_id,
                    user_id=selected_user_id,
                    permissions=ChatPermissions(
                        can_send_messages=True
                    )
                )
        
        await delete_user(selected_user_id)
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ø—É–ª–∞.", show_alert=True)
        # await send_nickname_change_request(selected_user_id)
        await callback_query.message.delete()
    except Exception as e:
        await delete_user(selected_user_id)
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ø—É–ª–∞.", show_alert=True)
        # await send_nickname_change_request(selected_user_id)
        await callback_query.message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞ –≤—Å–µ—Ö –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data == 'ban_all_violator_users')
async def ban_all_violator_users(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    violator_users = await get_violator_users()

    if not violator_users:
        await callback_query.answer("–ù–µ—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π –¥–ª—è –±–∞–Ω–∞.", show_alert=True)
        await callback_query.message.delete()
        return

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö", callback_data="ban_all_violators_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_ban_all_violators")]
    ])

    await callback_query.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π ({len(violator_users)} —á–µ–ª.)?",
        reply_markup=confirm_kb
    )
    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'cancel_ban_all_violators')
async def cancel_ban_all_violators(callback_query: CallbackQuery):
    await callback_query.answer("–ë–∞–Ω –æ—Ç–º–µ–Ω—ë–Ω.")
    await callback_query.message.delete()

@router.callback_query(lambda c: c.data == 'ban_all_violators_confirm')
async def ban_all_violators_confirm(callback_query: CallbackQuery):
    admin_user_id = callback_query.from_user.id
    if not await is_user_admin(admin_user_id):
        return

    violator_users = await get_violator_users()

    if not violator_users:
        await callback_query.answer("–ù–µ—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π –¥–ª—è –±–∞–Ω–∞.", show_alert=True)
        await callback_query.message.delete()
        return

    success_count = 0
    for user in violator_users:
        user_id = user['user_id']
        chat_id = user['chat_id']
        try:
            await callback_query.bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
            await add_banned_user(user_id)
            success_count += 1
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_user_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    await callback_query.answer(f"–ó–∞–±–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {success_count}.", show_alert=True)
    await callback_query.message.delete()


###################################################
####–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π –≤ –Ω–∏–∫–Ω–µ–π–º–∞—Ö####
###################################################

@router.callback_query(lambda c: c.data == "add_nickname_words")
async def process_add_nickname_words(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è <b>–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã</b>. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Ñ—Ä–∞–∑—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>—Å–ª–æ–≤–æ1 —Å–ª–æ–≤–æ2 \"—Ñ—Ä–∞–∑–∞ –¥–ª—è –±–∞–Ω–∞\"</code>",
        parse_mode='HTML'
    )
    await state.set_state(FunctionStates.waiting_for_nickname_words_to_add)
    await callback_query.answer()


@router.message(FunctionStates.waiting_for_nickname_words_to_add)
async def add_nickname_words_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_user_admin(user_id):
        return

    text = message.text

    import shlex
    try:
        words_to_add = shlex.split(text)
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    added_words = []
    for word in words_to_add:
        await add_forbidden_nickname_word(word)
        added_words.append(word.lower())

    if added_words:
        await message.answer(
            f"–°–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã <b>{', '.join(added_words)}</b> –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.",
            parse_mode='HTML'
        )
    else:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã —É–∂–µ –±—ã–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.")

    await state.clear()


@router.callback_query(lambda c: c.data == "remove_nickname_words")
async def process_remove_nickname_words(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è <b>—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤</b>. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Ñ—Ä–∞–∑—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>—Å–ª–æ–≤–æ1 —Å–ª–æ–≤–æ2 \"—Ñ—Ä–∞–∑–∞ –¥–ª—è –±–∞–Ω–∞\"</code>",
        parse_mode='HTML'
    )
    await state.set_state(FunctionStates.waiting_for_nickname_words_to_remove)
    await callback_query.answer()


@router.message(FunctionStates.waiting_for_nickname_words_to_remove)
async def remove_nickname_words_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_user_admin(user_id):
        return

    text = message.text

    import shlex
    try:
        words_to_remove = shlex.split(text)
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    removed_words = []
    for word in words_to_remove:
        await remove_forbidden_nickname_word(word)
        removed_words.append(word.lower())

    if removed_words:
        await message.answer(
            f"–°–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã <b>{', '.join(removed_words)}</b> —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.",
            parse_mode='HTML'
        )
    else:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤/—Ñ—Ä–∞–∑ –Ω–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.")

    await state.clear()


@router.callback_query(lambda c: c.data == 'show_forbidden_nickname_words')
async def process_show_forbidden_nickname_words(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    forbidden_nickname_words = await get_forbidden_nickname_words()
    if forbidden_nickname_words:
        words_list = ', '.join(sorted(forbidden_nickname_words))
        message_text = f"üö´–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∏–∫–Ω–µ–π–º–∞—Ö:\n{words_list}"
    else:
        message_text = "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ –Ω–∏–∫–Ω–µ–π–º–∞—Ö –ø—É—Å—Ç"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ]
    )
    await callback_query.message.answer(message_text, parse_mode='HTML', reply_markup=kb)
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "add_nickname_emojis")
async def process_add_nickname_emojis(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è <b>–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã</b>. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
        "–ü—Ä–∏–º–µ—Ä: üòà ü§¨",
        parse_mode='HTML'
    )
    await state.set_state(FunctionStates.waiting_for_nickname_emojis_to_add)
    await callback_query.answer()


@router.message(FunctionStates.waiting_for_nickname_emojis_to_add)
async def add_nickname_emojis_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_user_admin(user_id):
        return

    emojis_to_add = message.text.strip().split()
    added_emojis = []
    for emoji in emojis_to_add:
        await add_forbidden_nickname_emoji(emoji)
        added_emojis.append(emoji)

    if added_emojis:
        await message.answer(
            f"–≠–º–æ–¥–∑–∏ <b>{' '.join(added_emojis)}</b> –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.",
            parse_mode='HTML'
        )
    else:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ —É–∂–µ –±—ã–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.")

    await state.clear()

@router.callback_query(lambda c: c.data == "remove_nickname_emojis")
async def process_remove_nickname_emojis(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è <b>—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤</b>. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
        "–ü—Ä–∏–º–µ—Ä: üòà ü§¨",
        parse_mode='HTML'
    )
    await state.set_state(FunctionStates.waiting_for_nickname_emojis_to_remove)
    await callback_query.answer()

@router.message(FunctionStates.waiting_for_nickname_emojis_to_remove)
async def remove_nickname_emojis_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_user_admin(user_id):
        return

    emojis_to_remove = message.text.strip().split()
    removed_emojis = []
    for emoji in emojis_to_remove:
        await remove_forbidden_nickname_emoji(emoji)
        removed_emojis.append(emoji)

    if removed_emojis:
        await message.answer(
            f"–≠–º–æ–¥–∑–∏ <b>{' '.join(removed_emojis)}</b> —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.",
            parse_mode='HTML'
        )
    else:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –Ω–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤.")

    await state.clear()


@router.callback_query(lambda c: c.data == 'show_forbidden_nickname_emojis')
async def process_show_forbidden_nickname_emojis(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    forbidden_nickname_emojis = await get_forbidden_nickname_emojis()
    if forbidden_nickname_emojis:
        emojis_list = ' '.join(sorted(forbidden_nickname_emojis))
        message_text = f"üö´–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–∞—Ö:\n{emojis_list}"
    else:
        message_text = "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–∞—Ö –ø—É—Å—Ç"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ]
    )
    await callback_query.message.answer(message_text, parse_mode='HTML', reply_markup=kb)
    await callback_query.answer()
