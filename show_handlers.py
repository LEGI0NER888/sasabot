

from aiogram.enums import ParseMode
import logging
from aiogram import F, Router
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton,
    InlineKeyboardMarkup
)

from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext



from config.config_bot import bot, GROUP_ID, ADMINS, CHANNEL_ID
from database import (
    get_setting, update_setting,

)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

class FunctionStates(StatesGroup):
    change_first_post_message = State()
    change_delete_message_count = State()
    waiting_for_words_to_add = State()
    waiting_for_words_to_remove = State()
    waiting_for_nickname_words_to_add = State()
    waiting_for_nickname_words_to_remove = State()
    waiting_for_nickname_emojis_to_add = State()
    waiting_for_nickname_emojis_to_remove = State()



# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ
welcome_sent = {}  # –ö–ª—é—á: thread_id, –ó–Ω–∞—á–µ–Ω–∏–µ: True/False

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
last_command_times = {}


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_user_admin(user_id):
    return str(user_id) in ADMINS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart(), F.chat.type == 'private')
async def cmd_start(message: Message):
    user_id = message.from_user.id
    if await is_user_admin(user_id):
        anti_spam_status = "–í–∫–ª—é—á–µ–Ω" if await get_setting('anti_spam_enabled') == '1' else "–û—Ç–∫–ª—é—á–µ–Ω"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üíÄ –ó–∞–ø—Ä–µ—Ç–∫–∏ üíÄ", callback_data="zapret_words_kb")],
                [InlineKeyboardButton(text="ü§° –ó–∞–ø—Ä–µ—Ç–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã ü§°", callback_data="zapret_nicknames_kb")],
                [InlineKeyboardButton(text="üí¶ –ó–∞–ø—Ä–µ—Ç–Ω—ã–µ —ç–º–æ–¥–∂–∏ üí¶", callback_data="zapret_emoji_kb")],
                [InlineKeyboardButton(text="üîí –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ üîí", callback_data="show_permanently_banned_users")],
                [InlineKeyboardButton(text="üîá –†–∞–∑–º—É—Ç –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö üîá", callback_data="unban_users_with_less_than_3_mutes")],
                [InlineKeyboardButton(text="üîç –ü–æ–¥–æ–∑—Ä–µ–Ω–∏—è üîç", callback_data="suspicions_menu")],
                [InlineKeyboardButton(text=f"‚å®Ô∏è [–ê–Ω—Ç–∏—Å–ø–∞–º: {anti_spam_status}] ‚å®Ô∏è", callback_data="toggle_anti_spam")],
                [InlineKeyboardButton(text="‚úâÔ∏è [–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π] ‚úâÔ∏è", callback_data="change_delete_count")],
                [InlineKeyboardButton(text="‚úèÔ∏è [–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 1-–≥–æ –ø–æ—Å—Ç–∞] ‚úèÔ∏è", callback_data="change_first_post_message")],
                
            ]
        )
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=kb)
    else:
        return
    
@router.callback_query(lambda c: c.data == 'zapret_words_kb')
async def zapret_words(callback_query: CallbackQuery):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ ‚ûï", callback_data="add_words")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞ ‚ûñ", callback_data="remove_words")],
            [InlineKeyboardButton(text="‚õîÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ ‚õîÔ∏è", callback_data="show_forbidden_words")],
            [InlineKeyboardButton(text="üßπ [–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤] üßπ", callback_data="confirm_clear_words")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ]
    )
    await callback_query.message.answer('–ó–ê–ü–†–ï–¢–ö–ò (–í –ß–ê–¢–ï)', parse_mode='HTML', reply_markup=kb)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'zapret_nicknames_kb')
async def zapret_nicknames(callback_query: CallbackQuery):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤ ‚ûï", callback_data="add_nickname_words")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤ ‚ûñ", callback_data="remove_nickname_words")],
            [InlineKeyboardButton(text="‚õîÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∏–∫–Ω–µ–π–º–∞—Ö ‚õîÔ∏è", callback_data="show_forbidden_nickname_words")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ]
    )
    await callback_query.message.answer('–ó–ê–ü–†–ï–¢–ù–´–ï –ù–ò–ö–ù–ï–ô–ú–´', parse_mode='HTML', reply_markup=kb)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'zapret_emoji_kb')
async def zapret_emoji(callback_query: CallbackQuery):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤ ‚ûï", callback_data="add_nickname_emojis")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤ ‚ûñ", callback_data="remove_nickname_emojis")],
            [InlineKeyboardButton(text="‚õîÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–∞—Ö ‚õîÔ∏è", callback_data="show_forbidden_nickname_emojis")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ]
    )
    await callback_query.message.answer('–ó–ê–ü–†–ï–¢–ù–´–ï –≠–ú–û–î–ó–ò (–í –ù–ò–ö–ê–•)', parse_mode='HTML', reply_markup=kb)
    await callback_query.answer()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
@router.callback_query(lambda c: c.data == 'toggle_anti_spam')
async def toggle_anti_spam(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if not await is_user_admin(user_id):
        return

    current_value = await get_setting('anti_spam_enabled')
    new_value = '0' if current_value == '1' else '1'
    await update_setting('anti_spam_enabled', new_value)
    status = "–≤–∫–ª—é—á–µ–Ω–∞" if new_value == '1' else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
    await callback_query.answer(f"–ê–Ω—Ç–∏—Å–ø–∞–º–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ {status}.", show_alert=True)

    anti_spam_status = "–í–∫–ª—é—á–µ–Ω" if new_value == '1' else "–û—Ç–∫–ª—é—á–µ–Ω"
    kb = callback_query.message.reply_markup
    for row in kb.inline_keyboard:
        for button in row:
            if button.callback_data == 'toggle_anti_spam':
                button.text = f"–ê–Ω—Ç–∏—Å–ø–∞–º: {anti_spam_status}"
    await callback_query.message.edit_reply_markup(reply_markup=kb)







# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞
@router.callback_query(lambda c: c.data == 'change_first_post_message')
async def prompt_for_new_post_message(callback_query: CallbackQuery, state: FSMContext):
    first_message = await get_setting("first_post_message")
    await callback_query.message.answer(f"<b>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–µ–π—á–∞—Å: \n<i>{first_message}</i></b>\n\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞:", parse_mode=ParseMode.HTML,reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_message_and_state")]]
            ))
    await state.set_state(FunctionStates.change_first_post_message)
    await callback_query.answer()

@router.message(FunctionStates.change_first_post_message)
async def change_first_post_message(message: Message, state: FSMContext):
    new_message = message.text
    await update_setting("first_post_message", new_message)
    await message.answer(
        f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n\n{new_message}",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]]
        )
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∞ —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(lambda c: c.data == 'change_delete_count')
async def prompt_for_new_delete_count(callback_query: CallbackQuery, state: FSMContext):
    counter = await get_setting("delete_message_count")
    await callback_query.message.answer(f"<b>–ß–∏—Å–ª–æ —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–π—á–∞—Å:\t<i>{counter}</i></b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", parse_mode=ParseMode.HTML,reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_message_and_state")]]
            ))
    await state.set_state(FunctionStates.change_delete_message_count)
    await callback_query.answer()

@router.message(FunctionStates.change_delete_message_count)
async def change_delete_message_count(message: Message, state: FSMContext):
    try:
        new_count = int(message.text)
        await update_setting("delete_message_count", str(new_count))
        await message.answer(
            f"–ù–æ–≤–æ–µ —á–∏—Å–ª–æ —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_count}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]]
            )
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
@router.callback_query(lambda c: c.data == 'close_message')
async def close_message(callback_query: CallbackQuery):
    await callback_query.message.delete()
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
@router.callback_query(lambda c: c.data == 'close_message_and_state')
async def close_message_and_state(callback_query: CallbackQuery,state: FSMContext):
    await callback_query.message.delete()
    await state.clear()
    await callback_query.answer()










